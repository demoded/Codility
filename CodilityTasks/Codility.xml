<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Codility</name>
    </assembly>
    <members>
        <member name="T:Codility.CodilitySolutions">
            <summary>
            Collection of Codility lessons
            </summary>
        </member>
        <member name="M:Codility.CodilitySolutions.TapeEquilibrium_solution(System.Int32[])">
            <summary>
            A non-empty array A consisting of N integers is given. Array A represents numbers on a tape.
            Any integer P, such that 0 &lt; P&lt;N, splits this tape into two non-empty parts: 
            A[0], A[1], ..., A[P − 1] and A[P], A[P + 1], ..., A[N − 1].
            The difference between the two parts is the value of: |(A[0] + A[1] + ... + A[P − 1]) − (A[P] + A[P + 1] + ... + A[N − 1])|
            In other words, it is the absolute difference between the sum of the first part and the sum of the second part.
            <example>
            For example, consider array A such that:
            <code><list type="table">
            <item> A[0] = 3</item>
            <item> A[1] = 1</item>
            <item> A[2] = 2</item>
            <item> A[3] = 4</item>
            <item> A[4] = 3</item>
            </list></code>
            We can split this tape in four places:
            <code><list type="table">
            <item>P = 1, difference = | 3 − 10| = 7</item>
            <item>P = 2, difference = | 4 − 9| = 5</item>
            <item>P = 3, difference = | 6 − 7| = 1</item>
            <item>P = 4, difference = | 10 − 3| = 7</item>
            </list></code>
            the function should return 1, as explained above.
            </example>
            Write a function:
            <code>class Solution { public int solution(int[] A); }</code>
            that, given a non-empty array A of N integers, returns the minimal difference that can be achieved.
            Write an efficient algorithm for the following assumptions:
            N is an integer within the range[2..100, 000];
            each element of array A is an integer within the range[−1, 000..1, 000].
            </summary>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:Codility.CodilitySolutions.PermMissingElem_solution(System.Int32[])">
            <summary>
            An array A consisting of N different integers is given. 
            The array contains integers in the range[1..(N + 1)], which means that exactly one element is missing.
            Your goal is to find that missing element.
            Write a function: that, given an array A, returns the value of the missing element.
            <example>
            For example, given array A { 2, 3, 1, 5}
            the function should return 4, as it is the missing element.
            </example>
            Write an efficient algorithm for the following assumptions:
            N is an integer within the range[0..100, 000];
            the elements of A are all distinct;
            each element of array A is an integer within the range[1..(N + 1)]. 
            </summary>
            <param name="A"></param>
            <returns></returns>
        </member>
    </members>
</doc>
